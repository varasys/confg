#!/usr/bin/env sh
# Â©, 2020, Casey Witt
# hosted at https://github.com/kcwitt/confg
# based on posix scripting tutorials at:
#   https://www.grymoire.com/Unix/Sh.html
#   https://steinbaugh.com/posts/posix.html
#   https://github.com/dylanaraps/pure-sh-bible
# linted with shellcheck version: 0.7.0 (https://www.shellcheck.net)

set -e # fail fast on errors

runAsRoot() { # restart as root if not already
  if [ "$(id -u)" -ne 0 ]; then
    sudo -p 'Restarting as root, password: ' sh "$0" "$@"
    exit $?
  fi
}

setPerms() { # set permissions if they don't already match
  DIR="${1}"
  PERMS="${2}"
  if [ "$(stat --printf=%a "${DIR}")" != "${PERMS}" ]; then
    printf "updating permissions to %s for \"%s\"\n" "${PERMS}" "${DIR}"
    chmod "${PERMS}" "${DIR}"
  fi
}

installScripts() { # install this script by copying it from wherever it is being run from
  # and create symlinks for all it's variants
  ROOT_DIR="${ROOT_DIR:-"/usr/local"}" # convienence variable to change prefix for all paths
  CONFG_FILE="${CONFG_FILE:-"${ROOT_DIR}/bin/confg"}" # script for user config files
  SECONFG_FILE="${SECONFG_FILE:-"${ROOT_DIR}/bin/seconfg"}" # script for secure user config files
  SYCONFG_FILE="${SYCONFG_FILE:-"${ROOT_DIR}/sbin/syconfg"}" # script for system config files
  ACONFG_FILE="${ACONFG_FILE:-"${ROOT_DIR}/bin/aconfg"}" # script for all user, sucure and system

  if [ "$1" = "force" ] || [ ! -f "${CONFG_FILE}" ]; then
    printf "installing main script to \"%s\"\n" "${CONFG_FILE}"
    cp -L "$0" "${CONFG_FILE}"
  else
    printf "file \"%s\" already exists\n" "${CONFG_FILE}"
  fi
  setPerms "${CONFG_FILE}" 755

  if [ "$1" = "force" ] || [ ! -e "${SECONFG_FILE}" ]; then
    printf "installing symlink at \"%s\" to \"%s\"\n" "${SECONFG_FILE}" "${CONFG_FILE}"
    ln -fs "${CONFG_FILE}" "${SECONFG_FILE}"
  else
    printf "file \"%s\" already exists\n" "${SECONFG_FILE}"
  fi

  if [ "$1" = "force" ] || [ ! -e "${SYCONFG_FILE}" ]; then
    printf "installing symlink at \"%s\" to \"%s\"\n" "${SYCONFG_FILE}" "${CONFG_FILE}"
    ln -fs "${CONFG_FILE}" "${SYCONFG_FILE}"
  else
    printf "file \"%s\" already exists\n" "${SYCONFG_FILE}"
  fi

  if [ "$1" = "force" ] || [ ! -e "${ACONFG_FILE}" ]; then
    printf "installing symlink at \"%s\" to \"%s\"\n" "${ACONFG_FILE}" "${CONFG_FILE}"
    ln -fs "${CONFG_FILE}" "${ACONFG_FILE}"
  else
    printf "file \"%s\" already exists\n" "${ACONFG_FILE}"
  fi
}

runGit() {
  if [ -n "${SUDO_USER}" ]; then # running in sudo environment
    export GIT_SSH_COMMAND="sudo -u ${SUDO_USER} -- ssh" # run ssh as the real user
  fi
  git "$@"
}

if [ $# -eq 0 ]; then
  printf "error: missing arguments\n"
  printf "usage: %s install [force] | sync | <git arguments>\n\n" "$(basename "$0")"
  exit 1
elif [ "${1}" = "install" ]; then
  runAsRoot "$@" # restart as root preserving all arguments
  shift # drop the first argument (ie. "install")
  installScripts "$@" # install scripts passing along remaining args (ie. optional "force")
elif [ "$1" = "sync" ]; then
  shift
  "$0" add -u
  "$0" commit "$@"
  "$0" push -u origin
else
  CMD="$(basename "$0")"
  case "${CMD}" in
    'confg')
      REPO="${CONFG_REPO:-"${HOME}/.confg/user"}"
      DIR="${CONFG_DIR:-"${HOME}"}"
      ;;
    'seconfg')
      REPO="${SECONFG_REPO:-"${HOME}/.confg/secure"}"
      DIR="${SECONFG_DIR:-"${HOME}"}"
      ;;
    'syconfg')
      runAsRoot "$@"
      REPO="${SYCONFG_REPO:-"/etc/confg"}"
      DIR="${SYCONFG_DIR:-"/"}"
      ;;
    'aconfg')
      printf "\nrunning \"confg\"\n"
      confg "$@"
      printf "\nrunning \"seconfg\"\n"
      seconfg "$@"
      printf "\nrunning \"syconfg\"\n"
      syconfg "$@"
      exit 0
      ;;
  esac

  if [ "$1" = "clone" ]; then
    printf "using git repo: \"%s\"\n\n" "${REPO}"
    runGit clone --bare "$2" "${REPO}"
    runGit --git-dir="${REPO}" --work-tree="${DIR}" config --local status.showUntrackedFiles no
    if [ "${CMD}" = "seconfg" ]; then
      printf "changing permissions to 600 for \"%s\"" "${REPO}"
      chmod 700 "${REPO}"
    fi
  elif [ "$1" = "ls" ]; then
    shift
    printf "using git repo: \"%s\"\n" "${REPO}"
    printf " using workdir: \"%s\"\n\n" "${DIR}"
    runGit --git-dir="${REPO}" --work-tree="${DIR}" ls-tree -r --name-only "$@" HEAD
  else
    printf "using git repo: \"%s\"\n" "${REPO}"
    printf " using workdir: \"%s\"\n\n" "${DIR}"
    runGit --git-dir="${REPO}" --work-tree="${DIR}" "$@"
  fi
fi

